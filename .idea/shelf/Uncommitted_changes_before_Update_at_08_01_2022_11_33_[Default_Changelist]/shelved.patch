Index: app/src/main/java/com/example/mtg_deck/DeckDatabaseHelper.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.mtg_deck;\r\n\r\nimport android.content.ContentValues;\r\nimport android.content.Context;\r\nimport android.database.sqlite.SQLiteDatabase;\r\nimport android.database.sqlite.SQLiteOpenHelper;\r\nimport android.util.Log;\r\nimport android.widget.Toast;\r\n\r\npublic class DeckDatabaseHelper extends SQLiteOpenHelper {\r\n\r\n    private static final String DB_NAME = \"deck\"; // the name of our database\r\n    private static final int DB_VERSION = 2; // the version of the database\r\n\r\n    DeckDatabaseHelper(Context context) {\r\n        super(context, DB_NAME, null, DB_VERSION);\r\n    }\r\n    private static void insertEnters1(SQLiteDatabase db, String color){\r\n        ContentValues colorsEnters = new ContentValues();\r\n        colorsEnters.put(\"COLOR\", color);\r\n        db.insert(\"COLORS\", null, colorsEnters);\r\n    }\r\n    private static void insertEnters2(SQLiteDatabase db, String type, String color, String com) {\r\n        ContentValues blueEnters = new ContentValues();\r\n        blueEnters.put(\"TYPE\", type);\r\n        blueEnters.put(\"COLOR\", color);\r\n        blueEnters.put(\"COM\", com);\r\n        db.insert(\"DECK_COLORS\", null, blueEnters);\r\n    }\r\n    private static void insertEnters3(SQLiteDatabase db,String color,  String type, String card, int resursID, int sign) {\r\n        ContentValues cardEnters = new ContentValues();\r\n\r\n        cardEnters.put(\"COLOR\", color);\r\n        cardEnters.put(\"TYPE\", type);\r\n        cardEnters.put(\"CARD\", card);\r\n        cardEnters.put(\"RESURSID\", resursID);\r\n        cardEnters.put(\"SIGN\", sign);\r\n\r\n        db.insert(\"CARDS\", null, cardEnters);\r\n    }\r\n\r\n    @Override\r\n    public void onCreate(SQLiteDatabase db){\r\n        db.execSQL(\"CREATE TABLE COLORS (_id INTEGER PRIMARY KEY AUTOINCREMENT, COLOR TEXT); \" );\r\n        Log.i(\"MyLog\", \"After create table1\");\r\n        //added headers\r\n        insertEnters1(db, \"Типы\");\r\n        insertEnters1(db, \"Побитовые операторы\");\r\n//        insertEnters1(db, \"Операторы сравнения\");\r\n//        insertEnters1(db, \"Логические операторы\");\r\n//        insertEnters1(db, \"Литералы\");\r\n//        insertEnters1(db, \"Оператор if\");\r\n//        insertEnters1(db, \"Оператор switch\");\r\n//        insertEnters1(db, \"Цикл while\");\r\n//        insertEnters1(db, \"Цикл do-while\");\r\n//        insertEnters1(db, \"Цикл for\");\r\n//        insertEnters1(db, \"Операторы перехода break, continue, return\");\r\n//        insertEnters1(db, \"Классы и объекты\");\r\n//        insertEnters1(db, \"Класс Object\");\r\n//        insertEnters1(db, \"Методы\");\r\n//        insertEnters1(db, \"Видимость. Спецификаторы доступа\");\r\n//        insertEnters1(db, \"Ключевое слово static\");\r\n//        insertEnters1(db, \"Вложенные и внутренние классы\");\r\n//        insertEnters1(db, \"Конструктор\");\r\n//        insertEnters1(db, \"Шаблон Builder\");\r\n//        insertEnters1(db, \"Шаблон Singleton\");\r\n//        insertEnters1(db, \"Наследование\");\r\n//        insertEnters1(db, \"Абстрактные классы и методы\");\r\n//        insertEnters1(db, \"Пакеты\");\r\n//        insertEnters1(db, \"Интерфейсы\");\r\n//        insertEnters1(db, \"Слушатели\");\r\n//        insertEnters1(db, \"Исключения\");\r\n//        insertEnters1(db, \"Потоки. Класс Thread и интерфейс Runnable\");\r\n//        insertEnters1(db, \"Перечисления enum\");\r\n//        insertEnters1(db, \"Обобщения (Generic)\");\r\n//        insertEnters1(db, \"Рекурсия\");\r\n//        insertEnters1(db, \"Класс String\");\r\n//        insertEnters1(db, \"Класс Scanner\");\r\n//        insertEnters1(db, \"Класс Math\");\r\n//        insertEnters1(db, \"Классы Date, Calendar, DateFormat\");\r\n//        insertEnters1(db, \"Класс Currency\");\r\n//        insertEnters1(db, \"Locale\");\r\n//        insertEnters1(db, \"Массивы\");\r\n//        insertEnters1(db, \"Stack\");\r\n//        insertEnters1(db, \"Коллекции\");\r\n//        insertEnters1(db, \" ArrayList\");\r\n//        insertEnters1(db, \" LinkedList\");\r\n//        insertEnters1(db, \"Множества: Set, HashSet, LinkedHashSet, TreeSet\");\r\n//        insertEnters1(db, \"Map (Отображение)\");\r\n//        insertEnters1(db, \"HashMap\");\r\n//        insertEnters1(db, \" LinkedHashMap\");\r\n//        insertEnters1(db, \"  ArrayMap и SparseArray\");\r\n//        insertEnters1(db, \"Интерфейс Comparable\");\r\n//        insertEnters1(db, \"Интерфейс Comparator\");\r\n//        insertEnters1(db, \"Система ввода/вывода\");\r\n//        insertEnters1(db, \" Класс File\");\r\n//        insertEnters1(db, \"  Класс InputStream\");\r\n//        insertEnters1(db, \" Класс PrintStream\");\r\n//        insertEnters1(db, \"Классы NIO\");\r\n//        insertEnters1(db, \"Random\");\r\n//        insertEnters1(db, \"Таймер - классы Timer и TimerTask\");\r\n//        insertEnters1(db, \"Обработка событий\");\r\n//        insertEnters1(db, \"Регулярные выражения\");\r\n        Log.i(\"MyLog\", \"After insert1\");\r\n        db.execSQL(\"CREATE TABLE DECK_COLORS (_id INTEGER PRIMARY KEY AUTOINCREMENT, TYPE TEXT, COLOR TEXT, COM TEXT); \" );\r\n        Log.i(\"MyLog\", \"After create table2\");\r\n\r\n\r\n        //added note\r\n\r\n        insertEnters2(db, \"\", \"Типы\", \"Примитивные типы Java не являются объектами. К ним относятся:\");\r\n        insertEnters2(db,\" \", \"Типы\",\" boolean - булев тип, может иметь значения true или false\");\r\n        insertEnters2(db,\" \", \"Типы\",\"byte - 8-разрядное целое число\");\r\n        insertEnters2(db,\" \", \"Типы\",\" short - 16-разрядное целое число\");\r\n        insertEnters2(db,\" \", \"Типы\",\" int - 32-разрядное целое число\");\r\n        insertEnters2(db,\" \", \"Типы\",\" long - 64-разрядное целое число\");\r\n        insertEnters2(db,\" \", \"Типы\",\" char - 16-разрядное беззнаковое целое, представляющее собой символ UTF-16 (буквы и цифры)\");\r\n        insertEnters2(db,\" \", \"Типы\",\"float - 32-разрядное число в формате IEEE 754 с плавающей точкой\");\r\n        insertEnters2(db,\" \", \"Типы\",\" double - 64-разрядное число в формате IEEE 754 с плавающей точкой\");\r\n        insertEnters2(db,\" \", \"Типы\",   \" Примитивный в данном случае не оскорбление, а просто даёт понять, что речь идёт о простом типе, который не умеет прыгать, спать или мяукать. Да что он вообще умеет? Ой, всё.\"\r\n                +       \" Java определяет четыре целочисленных типа: byte, short, int, long. Они могут быть положительными и отрицательными (Java не поддерживает только положительные значения без знака, как некоторые языки программирования).\"\r\n                +      \" Тип byte \"\r\n                +\" Наименьший по размеру целочисленный тип - byte. Это 8-битовый тип с диапазоном допустимых значений от -128 до 127. Переменные типа byte часто используются при работе с потоком данных из сети или файла, а также при работе с необработанными двоичными данными или в массивах для экономии памяти. \"\r\n\r\n                +       \" Объявить переменную типа byte можно следующим образом: \");\r\n\r\n        insertEnters2(db,\" \", \"Типы\",\"\");\r\n        insertEnters2(db,\" \", \"Типы\",\" byte c, a, t; // объявили сразу три переменные \");\r\n        insertEnters2(db,\" \", \"Типы\",\" \");\r\n        insertEnters2(db,\" \", \"Типы\",    \" В арифметических выражениях с переменными типа byte вычисления выполняются как с типом int, т.е. с помощью 32-битовой арифметики, а полученный результат будет 32-битовым. Смотри пример с short.\" +\r\n                              \" Строку с числом перевести в данный тип можно через метод parseByte(String): \" +\r\n                        \"\\n\" +\r\n                        \" byte x = Byte.parseByte('100'); \" +\r\n                \"\\n\"+\r\n                         \"Класс Byte является оболочкой для данного типа. Без необходимости не используйте в Android класс Byte. \" +\r\n                \" Слово «байт» (byte) возникло в компании IBM примерно в 1956 году. Оно произошло от слова bite («кусок»), но его было решено писать через букву y, чтобы не путать со словом «bit» («бит»). В течение некоторого времени слово «байт» обозначало просто число битов в конкретном потоке данных. Однако в середине 1960-х, в связи с разработкой семейства компьютеров System/360 в компании IBM, это слово стало обозначать группу из восьми бит.\" +\r\n                \" Любопытно, что bite имеет также значение 'укус' (сущ.) или 'укусить' (глагол). Таким образом это наш родной 'Кусь!'\\\");\"\r\n        +  \" В арифметических выражениях с переменными типа byte вычисления выполняются как с типом int, т.е. с помощью 32-битовой арифметики, а полученный результат будет 32-битовым. Смотри пример с short.\"\r\n                + \" Строку с числом перевести в данный тип можно через метод parseByte(String): \"\r\n                + \" byte x = Byte.parseByte('100'); \"\r\n                + \" Класс Byte является оболочкой для данного типа. Без необходимости не используйте в Android класс Byte. \"\r\n                + \" Слово «байт» (byte) возникло в компании IBM примерно в 1956 году. Оно произошло от слова bite («кусок»), но его было решено писать через букву y, чтобы не путать со словом «bit» («бит»). В течение некоторого времени слово «байт» обозначало просто число битов в конкретном потоке данных. Однако в середине 1960-х, в связи с разработкой семейства компьютеров System/360 в компании IBM, это слово стало обозначать группу из восьми бит. \"\r\n                + \" Любопытно, что bite имеет также значение 'укус' (сущ.) или 'укусить' (глагол). Таким образом это наш родной 'Кусь!'\");\r\n\r\n\r\n\r\n\r\n\r\n        insertEnters2(db, \"\", \"Побитовые операторы\",\"Существует несколько побитовых операторов, применимых к целочисленными типам long, int, short, char, byte.\");\r\n        insertEnters2(db, \"\", \"Побитовые операторы\", \"~\\tПобитовый унарный оператор NOT\");\r\n        insertEnters2(db, \"\", \"Побитовые операторы\",\"&\\tПобитовый AND\");\r\n        insertEnters2(db, \"\", \"Побитовые операторы\",\"&=\\tПобитовый AND с присваиванием\");\r\n        insertEnters2(db, \"\", \"Побитовые операторы\",\"|\\tПобитовый OR\");\r\n        insertEnters2(db, \"\", \"Побитовые операторы\",\"|=\\tПобитовый OR с присваиванием\");\r\n        insertEnters2(db, \"\", \"Побитовые операторы\",\"^\\tПобитовый исключающее OR\");\r\n        insertEnters2(db, \"\", \"Побитовые операторы\",\"^=\\tПобитовый исключающее OR с присваиванием\");\r\n        insertEnters2(db, \"\", \"Побитовые операторы\",\">>\\tСдвиг вправо\");\r\n        insertEnters2(db, \"\", \"Побитовые операторы\",\">>=\\tСдвиг вправо с присваиванием\");\r\n        insertEnters2(db, \"\", \"Побитовые операторы\",\">>>\\tСдвиг вправо с заполнением нулями\");\r\n        insertEnters2(db, \"\", \"Побитовые операторы\",\"<<\\tСдвиг влево\");\r\n        insertEnters2(db, \"\", \"Побитовые операторы\",\"<<=\\tСдвиг влево с присваиванием\");\r\n        insertEnters2(db, \"\", \"Побитовые операторы\",\">>>=\\tСдвиг вправо с заполнением нулями с присваиванием\");\r\n        insertEnters2(db, \"\", \"Побитовые операторы\",\"Все целочисленные типы представляются двоичными числами различной длины. Например, значение типа byte, равное 42, в двоичном представлении имеет вид 00101010, в котором каждая позиция представляет степень числа два.\"\r\n        +\"\\n\"\r\n        +\"\\nВсе целочисленные типа, за исключением char - типы со знаком, т.е. могут быть положительными или отрицательными. В Java применяется двоичное дополнение, при котором отрицательные числа представляются в результате инвертирования всех битов значения (изменения 1 на 0 и наоборот) и последующего добавления 1 к результату. Например, -42 представляется в результате инвертирования всех битов в двоичном представлении числа 42, что даёт значение 11010101, и добавления 1, что приводит к значению 110110110, или -42. Чтобы декодировать отрицательное число, необходимо вначале инвертировать все биты, а затем добавить 1 к результату. Например, инвертирование значения -42, или 11010110, приводит к значению 00101001, или 41, после добавления 1 к которому мы получим 42.\"\r\n        +\"\\n\"\r\n        +\"\\nДвоичное дополнение используется в большинстве компьютерных языков. Опустим теорию, нужно только помнить, что старший бит определяет знак целого числа.\");\r\n        insertEnters2(db, \"\", \"Побитовые операторы\",\"\");\r\n        insertEnters2(db, \"\", \"Побитовые операторы\",\"Побитовые логические операторы\");\r\n        insertEnters2(db, \"\", \"Побитовые операторы\",\"\");\r\n        insertEnters2(db, \"\", \"Побитовые операторы\",\"Побитовые логические операторы - это &, |, ^, ~. Побитовые операторы применяются к каждому отдельному биту каждого операнда.\");\r\n        insertEnters2(db, \"\", \"Побитовые операторы\",\"\");\r\n        insertEnters2(db, \"\", \"Побитовые операторы\",\"Результаты выполнения побитовых логических операторов\");\r\n        insertEnters2(db, \"\", \"Побитовые операторы\",\"\");\r\n        insertEnters2(db, \"\", \"Побитовые операторы\",\"A      B       A|B     A&B     A^B     ~A\"\r\n                                                                        +\"\\n\"\r\n        +                                                           \"0      0       0       0        0        1\");\r\n        insertEnters2(db, \"\", \"Побитовые операторы\",\"\");\r\n        insertEnters2(db, \"\", \"Побитовые операторы\",\"1\\t0\\t1\\t0\\t1\\t0\");\r\n        insertEnters2(db, \"\", \"Побитовые операторы\",\"0\\t1\\t1\\t0\\t1\\t1\");\r\n        insertEnters2(db, \"\", \"Побитовые операторы\",\"1\\t1\\t1\\t1\\t0\\t0\");\r\n//        insertEnters2(db, \"\", \"Побитовые операторы\",\"\");\r\n//        insertEnters2(db, \"\", \"Побитовые операторы\",\"\");\r\n//        insertEnters2(db, \"\", \"Побитовые операторы\",\"\");\r\n//        insertEnters2(db, \"\", \"Побитовые операторы\",\"\");\r\n//        insertEnters2(db, \"\", \"Побитовые операторы\",\"\");\r\n//        insertEnters2(db, \"\", \"Побитовые операторы\",\"\");\r\n//        insertEnters2(db, \"\", \"Побитовые операторы\",\"\");\r\n//        insertEnters2(db, \"\", \"Побитовые операторы\",\"\");\r\n//        insertEnters2(db, \"\", \"Побитовые операторы\",\"\");\r\n\r\n//\r\n//\r\n//\r\n//\r\n//\r\n//\r\n//        insertEnters2(db, \"CAVALCADE\",\"MONO-RED\",\"\");\r\n//\r\n//\r\n//\r\n//\r\n//\r\n//\r\n//        insertEnters2(db, \"VAMPIRES\", \"MONO-BLACK\",\"\");\r\n//\r\n//\r\n//\r\n//\r\n//\r\n//        insertEnters2(db, \"DISCARD\",\"MONO-BLACK\",\"\");\r\n//\r\n//\r\n//\r\n//\r\n//\r\n//\r\n//        insertEnters2(db, \"NISSA\", \"MONO-GREEN\",\"\");\r\n//\r\n//\r\n//\r\n//\r\n//\r\n//        insertEnters2(db, \"FOOD\",\"MONO-GREEN\",\"\");\r\n//\r\n//\r\n//\r\n//\r\n//\r\n//        insertEnters2(db, \"LIFE\", \"MONO-WHITE\",\"\");\r\n//\r\n//\r\n//\r\n//\r\n//\r\n//        insertEnters2(db, \"WEENIE\",\"MONO-WHITE\",\"\");\r\n//\r\n//\r\n//\r\n//\r\n\r\n\r\n\r\n        Log.i(\"MyLog\", \"After insert2\");\r\n        db.execSQL(\"CREATE TABLE CARDS (_id INTEGER PRIMARY KEY AUTOINCREMENT,COLOR TEXT ,TYPE TEXT , CARD TEXT, RESURSID INTEGER, SIGN INTEGER); \" );\r\n        insertEnters3(db, \"MONO-BLUE\",\"MILS\" , \"4 Мерфолк, Хранительница Тайн\", R.drawable.merfolk, 0);\r\n        insertEnters3(db, \"MONO-BLUE\", \"MILS\", \"4 Ошеломленная Ученица\", R.drawable.lener, 0);\r\n        insertEnters3(db, \"MONO-BLUE\", \"MILS\", \"4 Горгулья Вантресса\", R.drawable.gorg,0);\r\n        insertEnters3(db, \"MONO-BLUE\", \"MILS\", \"4 Стена Потерянных Мыслей\", R.drawable.faol,0);\r\n        insertEnters3(db, \"MONO-BLUE\", \"MILS\", \"3 Холодный Отказ\", R.drawable.coald,0);\r\n        insertEnters3(db, \"MONO-BLUE\", \"MILS\", \"4 Скажи Волшебное Слово\", R.drawable.woard,0);\r\n        insertEnters3(db, \"MONO-BLUE\", \"MILS\", \"4 Распад Мыслей\", R.drawable.one,0);\r\n        insertEnters3(db, \"MONO-BLUE\", \"MILS\", \"3 Попасть в Историю\", R.drawable.two,0);\r\n        insertEnters3(db, \"MONO-BLUE\", \"MILS\", \"4 Ведьмин Колодец\", R.drawable.three,0);\r\n        insertEnters3(db, \"MONO-BLUE\", \"MILS\", \"4 Затонувшие Тайны\",  R.drawable.five,0);\r\n        insertEnters3(db, \"MONO-BLUE\", \"MILS\", \"1 Замок Вантресс\",  R.drawable.six,0);\r\n        insertEnters3(db, \"MONO-BLUE\", \"MILS\", \"17 Остров\",  R.drawable.seven,0);\r\n        insertEnters3(db, \"MONO-BLUE\", \"MILS\", \"4 Мистическое Святилище\",  R.drawable.thore,0);\r\n        insertEnters3(db, \"MONO-BLUE\", \"MILS\", \"\",  0 ,1);\r\n        insertEnters3(db, \"MONO-BLUE\", \"MILS\", \"Доп. колода:\",  0 ,1);\r\n        insertEnters3(db, \"MONO-BLUE\", \"MILS\", \"3 Такой Крохотный\",  R.drawable.sid1 ,0);\r\n    }\r\n\r\n    @Override\r\n    public void onUpgrade(SQLiteDatabase sqLiteDatabase, int i, int i1) {\r\n\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/mtg_deck/DeckDatabaseHelper.java b/app/src/main/java/com/example/mtg_deck/DeckDatabaseHelper.java
--- a/app/src/main/java/com/example/mtg_deck/DeckDatabaseHelper.java	(revision d0eb01fe1e54a35f9950aca8042934da3400180c)
+++ b/app/src/main/java/com/example/mtg_deck/DeckDatabaseHelper.java	(date 1641630797563)
@@ -174,7 +174,7 @@
         insertEnters2(db, "", "Побитовые операторы","");
         insertEnters2(db, "", "Побитовые операторы","A      B       A|B     A&B     A^B     ~A"
                                                                         +"\n"
-        +                                                           "0      0       0       0        0        1");
+        +                                                           "0          0       0       0        0        1");
         insertEnters2(db, "", "Побитовые операторы","");
         insertEnters2(db, "", "Побитовые операторы","1\t0\t1\t0\t1\t0");
         insertEnters2(db, "", "Побитовые операторы","0\t1\t1\t0\t1\t1");
